syntax = "proto3";

package chrys.cloud.videostreaming.v1beta1;

// Annotation messages
message AnnotateRequest {

    string device_name = 1; // required: device name (required) identity of device
    string remote_stream_id = 2; //optional: if associated with storage, the ID of Chrysalis Cloud deviceID
    string type = 3; // required: event type: e.g. moving, exit, entry, stopped, parked, ...
    int64 start_timestamp = 4; //required: start of the event
    int64 end_timestamp = 5; // optional: event of the event
    string object_type = 6; // optional: e.g. person, car, face, bag, roadsign,...
    string object_id = 7; // optional: e.g. object id from the ML model
    string object_tracking_id = 8; // optional: tracking id of the object
    double confidence = 9; // confidence of inference [0-1.0]
    BoudingBox object_bouding_box = 10; // optional: object bounding box
    Location location = 11; // optional: object GEO location
    Coordinate object_coordinate = 12; // optional: object coordinates within the image
    repeated Coordinate mask = 13; // optional" object mask (polygon)
    repeated double object_signature = 14; // optional: signature of the detected item
    string ml_model = 15; // optional: description of the module that generated this event
    string ml_model_version = 16; // optional: version of the ML model
    int32 width = 17; // optional: image width
    int32 height = 18; // optional: image height
    bool is_keyframe = 19; // optional: true/false if this annotation is from keyframe
    string video_type = 20; // optional: e.g. mp4 filename, live stream, ...
    int64 offset_timestamp = 21; // optional: offset from the beginning
    int64 offset_duration = 22; // optional: duration from the offset
    int64 offset_frame_id = 23; // optional: frame id of the 
    int64 offset_packet_id = 24; // optional: offset of the packet

    // extending the event message meta data (optional)
    string custom_meta_1 = 25; // e.g. gender, hair, car model, ...
    string custom_meta_2 = 26;
    string custom_meta_3 = 27;
    string custom_meta_4 = 28;
    string custom_meta_5 = 29;
}

message AnnotateResponse {
    string device_name = 1;
    string remote_stream_id = 2;
    string type = 3;
    int64 start_timestamp = 4;
}

message Location {
    double lat = 1; // latitude
    double lon = 2; // longitude
}

message Coordinate {
    double x = 1;
    double y = 2;
    double z = 3;
}

message BoudingBox {
    int32 top = 1;
    int32 left = 2;
    int32 width = 3;
    int32 height = 4;
}

// Video Streaming messages
message ShapeProto {
    message Dim {
        // Size of image in that dimension (-1 means unknown dimension)
        int64 size = 1;
        // optional name of image dimension
        string name = 2;
    }

    repeated Dim dim = 2;
}

message VideoFrame {
    int64 width = 1;
    int64 height = 2;
    bytes data = 3;
    int64 timestamp = 4;
    bool is_keyframe = 5;
    int64 pts = 6;
    int64 dts = 7;
    string frame_type = 8;
    bool is_corrupt = 9;
    double time_base = 10;
    ShapeProto shape = 11;
    string device_id = 12;
    int64 packet = 13;
    int64 keyframe = 14;
}

message VideoFrameRequest {
    bool key_frame_only = 1;
    string device_id = 2;
}

// ListStream messages
message ListStream {
    string name = 1;
    string status = 2;
    int64 failing_streak = 3;
    string health_status = 4;
    bool dead = 5;
    int64 exit_code = 6;
    int32 pid = 7;
    bool running = 8;
    bool paused = 9;
    bool restarting = 10;
    bool oomkilled = 11;
    string error = 12;
}
message ListStreamRequest {
}

// Proxy messages
message ProxyRequest {
    string device_id = 1;
    bool passthrough = 2; // true = passthrough streaming, false = stop passthrough streaming
}

message ProxyResponse {
    string device_id = 1;
    bool passthrough = 2;
}

// Storage messages
message StorageRequest {
    string device_id = 1;
    bool start = 2;
}
message StorageResponse {
    string device_id = 1;
    bool start = 2;
}


service Image {
    rpc VideoLatestImage(stream VideoFrameRequest) returns (stream VideoFrame) {}
    rpc ListStreams(ListStreamRequest) returns (stream ListStream) {}
    rpc Annotate(AnnotateRequest) returns (AnnotateResponse) {}
    rpc Proxy(ProxyRequest) returns (ProxyResponse) {} // start stop video passthrough
    rpc Storage(StorageRequest) returns (StorageResponse) {} // start stop storage request on the Chrysalis servers (only when Proxy is enabled)
}